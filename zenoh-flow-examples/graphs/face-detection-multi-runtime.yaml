flow: FacePipeline # it should have a id, from this we will have an Instance of the graph, UUID => flow
operators:
  - id : FaceDetection # this should be unique in the graph
    uri: file://./target/release/examples/libface_detection.so
    inputs:
      - id: Frame
        type: image
    outputs:
      - id: Frame
        type: image
    # configuration:
      # neural-network: haarcascades/haarcascade_frontalface_alt_tree.xml
      # neural-network: haarcascades/haarcascade_eye.xml #eyes only
      # more configurations can be found in opencv: /usr/share/opencv4/haarcascades
sources: # sources can have only ONE output
  - id : Camera0
    uri: file://./target/release/examples/libcamera_source.so
    output:
      id: Frame
      type: image
    configuration:
      camera: /dev/video0
      resolution: 800x600
      fps: 24
sinks: # sources can have only ONE input
  - id : Window
    uri: file://./target/release/examples/libvideo_sink.so
    input:
      id: Frame
      type: image

links:
- from: Camera0.Frame
  to: FaceDetection.Frame
- from: FaceDetection.Frame
  to: Window.Frame


mapping:
  - id: Window
    runtime: gigot
  - id: Camera0
    runtime: nuc
  - id: FaceDetection
    runtime: leia
